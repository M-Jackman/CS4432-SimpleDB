The replacement policies uses an array of integers. Each number at an index corresponds to the
buffer at that index. That way, the buffers themselves are not being accessed in any way, only
a separate entity is. Any changes in the array of buffers is reflected in these arrays so that, 
when it comes time to replace a buffer, the appropriate buffer is changed.

A replacement policy interface was created in order to better implement the two replacement policies.
Both have functions for when a buffer needs to be replaced, when a buffer is added, pinned, and unpinned.

Least Recently Used originally sets all of the numbers in its array to 0, meaning that there
is nothing there at that index. If there's a -1, that means that there is something in the buffer
at that index, but it is pinned so it cannot be replaced. If there is a number that is greater
than 0 in this array, it means the buffer at that location is unpinned and can be replaced. 
Every time a buffer is added, pinned, or unpinned, every buffer that is unpinned has their 
value in the index array incremented by 1. A larger number means that this buffer is more likely
to be removed when there is no more space. When a replacement is needed, the index array is then 
searched to find the largest number in it, and when it does, returns the buffer, which will be
replaced. If all the buffers are pinned, it returns null meaning nothing can be replaced

Clock Replacement starts similarly to Least Recently Used by setting all of its numbers in its
array to 0. Whenever a buffer is pinned, the value in the array at that buffer's index is set
to -1, just like in least recently used. However, unlike in least recently used,, where the 
values can go to infinity, it only can have two other values, 1 & 2. If it is a 1, that means
there is a chance the data can get sent back to the disk. If it's a 2, that means there's less
of a chance the data gets sent back. There is also another value called clockHand which starts 
at 0 and is used to see which buffer is currently being pointed at. This value only changes 
when the replacement policy is being used or a new buffer is added. It will increment by 1 until
its value is equal to the number of buffers. If that is the case, then it has to start from the
first buffer, so its value is reset to 0. The clock replacement policy checks if the current 
buffer the clock hand is on is unpinned. If it isn't, then it checks if the value is a 1 or 2. 
If it is a 1, that means this buffer can be removed and a new buffer can take it's place. If 
not, then it has to check all of the other buffers before it returns back to the buffer the 
clock hand started at and finds out that the information in the buffer can be replaced. However,
if any other index values it checks has a value of 1, that buffer can be removed and it is
returned. If all of the buffers are pinned, it returns null meaning nothing can be replaced.

The buffer managers use these replacement policies when looking for an unpinned buffer. Before
populating the buffer, a queue of integers with all of the free buffers is created. Whenever a 
new page is added, the queue is polled and whatever value is received is the next empty buffer.
This is an easy way to figure out which buffer empty, rather than having to search the entire
buffer pool to find an empty buffer. A hashmap is also created to show which block is located in
which buffer. Hashmaps have a constant search time of O(1), so it has faster search time than the
previous system and automatically returns null if a block isn't associated with a buffer.

Due to the use of all of new data structures, a new buffer manager was created. We wanted to keep
the old one for comparison, so we created a new buffer manager. We also created a buffer manager 
interface which both buffer managers now implement. We just made it so that the actual BufferMgr 
class has the buffer manager interface as a private value instead of a single buffer manager since
we want it to use our new buffer manager as well as the old buffer manager.